generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(uuid())
  fullname   String
  email      String        @unique
  phone      String
  isVerified Boolean       @default(false)
  userType   UserType
  password   String
  roleId     String?
  role       Role?         @relation(fields: [roleId], references: [id])
  truck      Truck[]       @relation(name: "owner")
  createdBy  Truck[]       @relation(name: "created")
  addresses  UserAddress[]
  order      Order[]
  token      Token[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime?     @updatedAt
}

model Token {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  type          String
  token         String
  isBlacklisted Boolean  @default(false)
  expires       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Truck {
  id                 String    @id @default(uuid())
  plateNumber        String    @unique
  capacity           String
  type               String
  status             String?   @default("available")
  ownerId            String
  owner              User      @relation(fields: [ownerId], references: [id], name: "owner")
  creatorId          String
  creator            User      @relation(fields: [creatorId], references: [id], name: "created")
  order              Order[]
  registrationPapers Json[]
  // registrationPapers RegistrationPaper[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
}

// model RegistrationPaper {
//   id        String   @id @default(uuid())
//   paperUrl  String
//   truck     Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade)
//   truckId   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Order {
  id              String      @id @default(uuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  truckId         String
  truck           Truck       @relation(fields: [truckId], references: [id])
  pickupId        String
  pickupAddress   UserAddress @relation(fields: [pickupId], references: [id], name: "pickup")
  deliveryId      String
  deliveryAddress UserAddress @relation(fields: [deliveryId], references: [id], name: "delivery")
  recipientName   String
  recipientPhone  String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime?   @updatedAt
}

model UserAddress {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  country       String
  state         String
  city          String
  street        String
  houseNumber   String
  landmark      String?
  postalCode    String?
  status        Boolean
  isDefault     Boolean
  pickupOrder   Order[]   @relation(name: "pickup")
  deliveryOrder Order[]   @relation(name: "delivery")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  users       User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
}

model Permission {
  id        String    @id @default(uuid())
  name      String
  method    String
  route     String
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum UserType {
  Admin
  User
  Driver
  TruckOwner
}
