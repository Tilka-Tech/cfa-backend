generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  isVerified   Boolean       @default(true)
  fullname     String
  email        String        @unique
  phone        String
  userType     UserType
  password     String
  // userImage   Json
  roleId       String?
  role         Role?         @relation(fields: [roleId], references: [id])
  truck        Truck[]       @relation(name: "owner")
  createBy     Truck[]       @relation(name: "created")
  truckDriver  Truck?        @relation(name: "driver")
  addresses    UserAddress[]
  order        Order[]
  token        Token[]
  status       UserStatus    @default(Pending)
  transaction  Transaction[]
  driverStatus DriverStatus? // @default(Online)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
}

model Token {
  id            String   @id @default(uuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  type          String
  token         String
  isBlacklisted Boolean  @default(false)
  expires       DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Truck {
  // id                 String    @id @default(uuid())
  // plateNumber        String    @unique
  capacity           String
  type               String
  // status             String?   @default("available")
  // ownerId            String
  // owner              User      @relation(fields: [ownerId], references: [id], name: "owner")
  // creatorId          String
  // creator            User      @relation(fields: [creatorId], references: [id], name: "created")
  // order              Order[]
  registrationPapers Json[]
  // registrationPapers RegistrationPaper[]
  // createdAt          DateTime  @default(now())
  // updatedAt          DateTime? @updatedAt

  id              String       @id @default(uuid())
  plateNumber     String       @unique
  status          TruckStatus  @default(Unverified)
  ownerId         String
  owner           User         @relation(fields: [ownerId], references: [id], name: "owner")
  createdById     String
  createdBy       User         @relation(fields: [createdById], references: [id], name: "created")
  order           Order[]
  driverId        String?      @unique
  driver          User?        @relation(fields: [driverId], references: [id], name: "driver")
  locationId      String?
  locationAddress UserAddress? @relation(fields: [locationId], references: [id], name: "currentLocation")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// model RegistrationPaper {
//   id        String   @id @default(uuid())
//   paperUrl  String
//   truck     Truck    @relation(fields: [truckId], references: [id], onDelete: Cascade)
//   truckId   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model Order {
  id                            String       @id @default(uuid())
  userId                        String
  user                          User         @relation(fields: [userId], references: [id])
  truckId                       String?
  truck                         Truck?       @relation(fields: [truckId], references: [id])
  pickupId                      String
  pickupAddress                 UserAddress  @relation(fields: [pickupId], references: [id], name: "pickup")
  deliveryId                    String
  deliveryAddress               UserAddress  @relation(fields: [deliveryId], references: [id], name: "delivery")
  neededTruckType               String
  commodityToDeliver            String
  estimatedWeightOfDelivarables String
  numberOfDeleverable           String
  recipientName                 String
  recipientPhone                String
  status                        OrderStatus
  transaction                   Transaction?
  createdAt                     DateTime     @default(now())
  updatedAt                     DateTime?    @updatedAt
}

model Transaction {
  id            String          @id @default(uuid())
  orderId       String          @unique
  order         Order           @relation(fields: [orderId], references: [id])
  userId        String
  user          User            @relation(fields: [userId], references: [id])
  description   String
  transactionId String
  type          TransactionType
  amount        Int
  recieptUrl    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
}

model UserAddress {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  country       String
  state         String
  city          String
  street        String
  houseNumber   String
  landmark      String?
  postalCode    String?
  status        Boolean
  isDefault     Boolean
  pickupOrder   Order[]   @relation(name: "pickup")
  deliveryOrder Order[]   @relation(name: "delivery")
  truck         Truck[]   @relation(name: "currentLocation")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  users       User[]
  permissions Permission[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
}

model Permission {
  id        String    @id @default(uuid())
  name      String
  method    String
  route     String
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum UserType {
  Admin
  User
  Driver
  TruckOwner
}

enum TruckStatus {
  In_Transit
  Under_Maintenance
  Unverified
  Active
  In_Active
}

enum OrderStatus {
  Pending
  Completed
  In_Progress
}

enum DriverStatus {
  Online
  Offline
  Busy
}

enum UserStatus {
  Pending
  Active
  Suspended
}

enum TransactionType {
  Shopping
  Transfer
  Service
}
